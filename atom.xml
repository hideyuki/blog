<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[MUGEN C-400]]></title>
  <link href="http://www.embodiedweb.net/blog/atom.xml" rel="self"/>
  <link href="http://www.embodiedweb.net/blog/"/>
  <updated>2014-01-04T23:48:18+09:00</updated>
  <id>http://www.embodiedweb.net/blog/</id>
  <author>
    <name><![CDATA[Hideyuki Takei]]></name>
    <email><![CDATA[takehide22@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[暗号の解読方法とその対策]]></title>
    <link href="http://www.embodiedweb.net/blog/blog/2013/03/15/common-attack-crypto/"/>
    <updated>2013-03-15T20:55:00+09:00</updated>
    <id>http://www.embodiedweb.net/blog/blog/2013/03/15/common-attack-crypto</id>
    <content type="html"><![CDATA[<p>最近はまた<a href="http://www.j-cast.com/2013/03/15169841.html">メガネ屋さんのクレジットカード情報が流出</a>しました！！こういうセキュアな情報へアクセスするための攻撃は、サーバなどのソフトウェアだけでなく、ハードウェアでも起こりえます。</p>

<p>これらの攻撃に対抗するためには、ハードウェア／ソフトウェアでセキュアな情報をデータ認証したり、個体のクローンを作成できないように相手認証する、などの認証が必要です。その認証を実現するにあたって、なるべく強力な暗号を採用しています。</p>

<p>今回はその暗号に対する攻撃方法と、それに対する対策を見てきましょう。</p>

<p>よくある攻撃方法としては、以下のものがあります。</p>

<ul>
<li>中間者攻撃 (Man in the middle)</li>
<li>ブルートフォース攻撃 (Brute force)</li>
<li>反射攻撃 (Replay attack)</li>
<li>RAMモニタリング攻撃 (RAM monitoring)</li>
<li>マイクロコントローラのプログラム(ファーム)のリバースエンジニアリング</li>
<li>ハードウェア攻撃</li>
</ul>


<p>それぞれの詳細と対策を以下に述べていきます。</p>

<h2>中間者攻撃 (Man in the middle)</h2>

<p>この攻撃はバスモニターとロジアナを使って行われます。</p>

<p>1-wireで繋がれている認証デバイスのピンをキャプチャし、認証デバイスから返ってくるデータを取得します。そして、認証デバイスとホストシステムとのコネクションを一時的に中断させ、中断している暗号データとは違うデータを攻撃者が挿入していきます。そこで得られたデータは暗号のデコードツールとして使われます。</p>

<p>SHA-256 の1方向ハッシュ関数はこの種の攻撃を防ぐことができます。チャレンジ（入力）を求めるためのシークレットデータを知ることなしに、攻撃者はー正しいレスポンス(出力)を予測することはできません。チャレンジやレスポンスのいつくかのビットを変えると、ホストシステムはチャレンジ-レスポンスのペアを無効と判断します。</p>

<p>もし固定のチャレンジ-レスポンスのペアが使っている場合、攻撃者はあらかじめすべてのチャレンジを知らなければなりません。また、可変のチャレンジ-レスポンスのペアの場合は、予測は非常に困難になり攻撃は成功しないでしょう。</p>

<h2>ブルートフォース攻撃 (Brute force)</h2>

<p>この攻撃方法は中間者攻撃に似ており、同様にバスをキャプチャします。攻撃者はそれらのデータをコンピュータに移し解析します。たいていの場合、チャレンジとして結合されるシークレットを1からすべて試し、先に記録したレスポンスが得られたら成功です。</p>

<p>しかし SHA-256 の場合、シークレットはとてつもなく巨大なキーが設定されているので、この攻撃が成功するには膨大な時間が必要となります。ゆえに限りなく不可能です。</p>

<h2>反射攻撃 (Replay attack)</h2>

<p>反射攻撃は中間者攻撃とほぼ同じです。認証デバイス-ホストシステム間のバスをモニタリング &amp; 記録し、それらのデータをホストシステムに戻します。そうすると、ホストしてムは正しいデータとして判断されます。</p>

<p>この攻撃を阻止するには、毎回変化するチャレンジを使用します。たいていは、乱数をホストシステムで作成し、それをチャレンジとして使用しています。乱数のチャレンジから作成されるMAC (Message Authentication Code) は、毎回ユニークな値となり、レスポンスがモニタリング &amp; 記録されたとしても次回はチャレンジが変わるので無効となります。</p>

<p>この攻撃が成功するには乱数が本当の乱数でない時だけです。(C言語のRANDで生成される擬似乱数は使用してはいけません) ですので、反射攻撃においては乱数生成器に気をつけてください。もし可能なら、FIPS の擬似乱数生成器を利用しましょう。</p>

<h2>RAMモニタリング攻撃 (RAM monitoring)</h2>

<p>コンピュータやマイクロプロセッサのメモリを定期的にスナップショットをとる手法です。メモリーに存在するシークレットはスナップショットから抽出することができます。この攻撃方法はたいてい認証チップからの期待されたレスポンスを計算するためにシークレットを使う必要があるためホストシステムに搭載されます。</p>

<p>この攻撃を防ぐためには、MACを算出する時にシークレットをRAMに展開することがない認証チップを採用する必要がります。そうすることでRAMを読まれてもシークレットを発見されることはありません。</p>

<p>また、認証チップと接続されるマイクロコントローラは以下の点を注意して実装する必要があります。</p>

<ul>
<li>新規コードの追加/読み取りの禁止</li>
<li>JTAGやテスト/プログラミングのインタフェースの無効化</li>
<li>内部メモリのリソースへのアクセスを禁止</li>
<li>自己プログラミング禁止</li>
<li>コードセグメントにコードをフィットさせる</li>
<li>コードはややこしく書く。きれいに書かない

<ul>
<li>C の struct はデータが整った状態でメモリーに格納されてしまう</li>
<li>普通良いと言われているコーディングスタンダートは、この場合“逆に”良くない</li>
<li>すくなくとも数字はランダムに格納し、スタックは必要な時だけ使おう</li>
</ul>
</li>
</ul>


<p>ちゃんと最後にマイコンのヒューズの設定をしましょう！</p>

<p>そして、RAMはなるべく使わないように心がけましょう。。(きびしい)</p>

<h2>マイクロコントローラのプログラム(ファーム)のリバースエンジニアリング</h2>

<p>ホストのプログラムが抽出されたり、セキュリティーチェックをパスするために編集されたり、新規コードを挿入されれば、たくさんの偽物デバイスを生むことになります。</p>

<p>まず1つ目の防御方法として、読み出し／コピーが困難なROMに格納されるブートローダです。
ROMに入ったブートローダはユーザコードよりも変更が難しく、防御が簡単です。</p>

<p>2つ目に、コンパイラの最適化を有効にしておきましょう。最近のリバースコンパイラはなかなか良くなってきていますが、最適化のかかったコードの解析はアマチュアにとってはとても厳しいものです。</p>

<h2>ハードウェア攻撃</h2>

<p>ハードウェア攻撃は、文字通り物理的に値を読み出す攻撃手法です。</p>

<p>この攻撃から完璧に防ぐためには、外部から壊すことができないチップを採用する必要があります。(といっても、そのようなことはほぼ不可能です)</p>

<p>ハードウェア攻撃をなるべく阻止するように設計された認証チップを使いましょう。</p>

<hr />

<h1>おわりに</h1>

<p>上記では暗号の解読や機械に対しての攻撃方法を挙げていましたが、それ以外にも人や暗号システムに攻撃することも可能です。</p>

<ul>
<li>人へのアタック：こっそりオフィスに忍び込んで手書きのパスワードを手に入れる。PCの盗難など。</li>
<li>バックドアの入り方の流出：そもそもバックドアは作らないように、、</li>
</ul>


<p>BCASは誰かがバックドアの入り方を流出(?!)させてBCASの暗号が無効化されましたね。(新しいBCASではバックドア自体がなくなっているようですが、、)</p>

<p>まだまだ暗号の旅は続く、、</p>

<h2>参考文献</h2>

<ul>
<li><a href="http://en.wikipedia.org/wiki/SHA-2">http://en.wikipedia.org/wiki/SHA-2</a></li>
<li><a href="http://japan.maximintegrated.com/app-notes/index.mvp/id/3675">http://japan.maximintegrated.com/app-notes/index.mvp/id/3675</a></li>
<li><a href="http://dev.sbins.co.jp/cryptography/cryptography01.html">http://dev.sbins.co.jp/cryptography/cryptography01.html</a></li>
<li><a href="http://www.atmel.jp/ja/jp/devices/ATSHA204.aspx?tab=documents">http://www.atmel.jp/ja/jp/devices/ATSHA204.aspx?tab=documents</a></li>
<li><a href="http://www.wani.net/bak/crypt/attack.htm">http://www.wani.net/bak/crypt/attack.htm</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Freebase と 新しい youtube data api を使う]]></title>
    <link href="http://www.embodiedweb.net/blog/blog/2013/02/06/freebase-and-new-youtube-data-api/"/>
    <updated>2013-02-06T02:05:00+09:00</updated>
    <id>http://www.embodiedweb.net/blog/blog/2013/02/06/freebase-and-new-youtube-data-api</id>
    <content type="html"><![CDATA[<h2>サンプルを作った</h2>

<p> <a href="https://github.com/hideyuki/new-youtube-js-sample">https://github.com/hideyuki/new-youtube-js-sample</a></p>

<p><a href="http://blog.embodiedweb.net/new-youtube-js-sample/"><img src="../images/freebase_youtube.png" alt="image" /></a></p>

<p> キーワードを入れるとそれに対応するトピックが出てきて、そのトピックをクリックするとトピックに対応するyoutubeプレイリストを取得。プレイリストの画像をクリックすると曲を取得できる。</p>

<h2>freebaseの一般的なページ</h2>

<p><a href="http://www.freebase.com/view/en/pop_music#broadcast">http://www.freebase.com/view/en/pop_music#broadcast</a></p>

<p>ここに表示されている情報は以下の「トピックの情報を取得」でゲッツできる</p>

<h2>トピックの情報を取得</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>https://www.googleapis.com/freebase/v1/topic/m/02w4v?filter=allproperties</span></code></pre></td></tr></table></div></figure>


<h2>topicの画像取得</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>http://img.freebase.com/api/trans/image_thumb/en/death_metal?maxheight=200&mode=fit&maxwidth=150</span></code></pre></td></tr></table></div></figure>


<h2>語句で検索</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>https://www.googleapis.com/freebase/v1/search?query=beatles&limit=100</span></code></pre></td></tr></table></div></figure>


<h2>MQLで検索</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>https://www.googleapis.com/freebase/v1/mqlread?query=%5B%7B%22type%22%3A%22/music/genre%22%2C%22id%22%3Anull%2C%22name%22%3Anull%2C%22limit%22%3A100%7D%5D&cursor</span></code></pre></td></tr></table></div></figure>


<h2>参考</h2>

<ul>
<li><a href="https://developers.google.com/youtube/v3/">Google launced YouTube API (v3) for experimental. </a></li>
<li><a href="https://developers.google.com/freebase/">Freebase integration via topics and universal search</a></li>
<li><a href="http://wiki.freebase.com/wiki/MQL_Manual">MQL manual</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RaspberryPi(debian)にL-02Cを繋いでPPP接続を行う＆PPP再接続を自動にする方法]]></title>
    <link href="http://www.embodiedweb.net/blog/blog/2012/12/31/connect-ppp-on-raspberrypi-debina/"/>
    <updated>2012-12-31T09:29:00+09:00</updated>
    <id>http://www.embodiedweb.net/blog/blog/2012/12/31/connect-ppp-on-raspberrypi-debina</id>
    <content type="html"><![CDATA[<h2>今年、僕たちは植木を作る。</h2>

<p><a href="https://github.com/hideyuki/ueki">https://github.com/hideyuki/ueki</a></p>

<p><img src="https://raw.github.com/hideyuki/ueki/master/images/ueki.png" alt="image" /></p>

<p>植木型のソーシャル植物ロボット。</p>

<p>盆栽が動くんだ。わくわくする。</p>

<p>ということで、さっそくその準備だ。RaspberryPiを使っているが、debianが動いているし使い方も全く変わらない。</p>

<h2>L-02Cをdebianで使うには</h2>

<p>L-02Cは、最初CDドライブとして認識され、それをアンマウントするとシリアルポートとして認識される。</p>

<p>lsusb で確認してみよう。L-02Cを挿しときはこんな感じで認識される。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Bus 001 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub
</span><span class='line'>Bus 001 Device 002: ID 0424:9512 Standard Microsystems Corp. 
</span><span class='line'>Bus 001 Device 003: ID 0424:ec00 Standard Microsystems Corp. 
</span><span class='line'>Bus 001 Device 004: ID 05e3:0608 Genesys Logic, Inc. USB-2.0 4-Port HUB
</span><span class='line'>Bus 001 Device 005: ID 2019:ab2a PLANEX GW-USNano2 802.11n Wireless Adapter [Realtek RTL8188CUS]
</span><span class='line'>Bus 001 Device 006: ID 1004:618f LG Electronics, Inc.</span></code></pre></td></tr></table></div></figure>


<p>一番下の LG Electronics, Inc がL-02C。</p>

<p>ejectしてみよう。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ eject sr0</span></code></pre></td></tr></table></div></figure>


<p>そして、もう一度 lsusb でチェック。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Bus 001 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub
</span><span class='line'>Bus 001 Device 002: ID 0424:9512 Standard Microsystems Corp. 
</span><span class='line'>Bus 001 Device 003: ID 0424:ec00 Standard Microsystems Corp. 
</span><span class='line'>Bus 001 Device 004: ID 05e3:0608 Genesys Logic, Inc. USB-2.0 4-Port HUB
</span><span class='line'>Bus 001 Device 005: ID 2019:ab2a PLANEX GW-USNano2 802.11n Wireless Adapter [Realtek RTL8188CUS]
</span><span class='line'>Bus 001 Device 006: ID 1004:618f LG Electronics, Inc. Ally/Optimus One</span></code></pre></td></tr></table></div></figure>


<p>Ally/Optimus One なんてのがついてる。それとともに /dev/ttyUSB0〜3が出現する。これがUSBモデムのシリアルポートです。</p>

<p>最初のCDドライブとして認識されるのは邪魔なので、usb_modeswitchを使って最初からシリアルポートとして認識されるようにしてみよう。</p>

<p>まずはusb_modeswitchのインストールから。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo apt-get install usb_modeswitch</span></code></pre></td></tr></table></div></figure>


<p>そして、/etc/usb_modeswitch.confを編集</p>

<figure class='code'><figcaption><span>/etc/usb_moduswitch.conf</span><a href='https://github.com/hideyuki/ueki/blob/master/conf/usb_modeswitch.conf'>Source</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">DefaultVendor</span><span class="o">=</span> 0x1004
</span><span class='line'><span class="nv">DefaultProduct</span><span class="o">=</span>0x61dd
</span><span class='line'>
</span><span class='line'><span class="nv">TargetVendor</span><span class="o">=</span> 0x1004
</span><span class='line'><span class="nv">TargetProduct</span><span class="o">=</span>0x618f
</span><span class='line'>
</span><span class='line'><span class="nv">MessageContent</span><span class="o">=</span>5553424312345678000000000000061b000000020000000000000000000000
</span><span class='line'><span class="nv">NeedResponse</span><span class="o">=</span>1
</span><span class='line'><span class="nv">CheckSuccess</span><span class="o">=</span>20
</span></code></pre></td></tr></table></div></figure>


<p>これでOK。</p>

<p>最後にL-02CがUSBポートに挿されたらusb_modeswitchが動くようにルールを設定する。</p>

<figure class='code'><figcaption><span>/etc/udev/rules/80-L02C.rules</span><a href='https://github.com/hideyuki/ueki/blob/master/conf/80-L02C.rules'>Source</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">SUBSYSTEM</span><span class="o">==</span><span class="s2">&quot;usb&quot;</span>,ACTION<span class="o">==</span><span class="s2">&quot;add&quot;</span>,ATTRS<span class="o">{</span>idVendor<span class="o">}==</span><span class="s2">&quot;1004&quot;</span>,ATTRS<span class="o">{</span>idProduct<span class="o">}==</span><span class="s2">&quot;61dd&quot;</span>, RUN+<span class="o">=</span><span class="s2">&quot;usb_modeswitch &#39;%b/%k&#39;&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>挿したら、いきなり/dev/ttyUSB0〜3が出てくるようになるはずだ。</p>

<p>参考：</p>

<p><a href="http://www.draisberghof.de/usb_modeswitch/bb/viewtopic.php?t=783">http://www.draisberghof.de/usb_modeswitch/bb/viewtopic.php?t=783</a></p>

<h2>wvdialでPPP接続を簡単にする</h2>

<p>では、/dev/ttyUSB2を使ってPPP接続してみよう。</p>

<p>参考になるページはこちら↓</p>

<p><a href="http://qapla.blog52.fc2.com/blog-entry-313.html">http://qapla.blog52.fc2.com/blog-entry-313.html</a></p>

<p>書かれているとおりにするとうまくいきます。</p>

<h2>wvdialで 自動的にPPP再接続できるようにする</h2>

<p>上記ページで最初の接続はうまくいくが、再接続すると、接続を確立できない。</p>

<p><a href="http://www.nttdocomo.co.jp/binary/pdf/support/trouble/manual/download/l02c/L-02C_J_08.pdf">L-02CのATコマンド</a>をチェックしてみると「ATH」で明示的に回線を切断できるようだ。</p>

<p>で結局、Initに1度ATH、2度ほど AT&amp;F ATZ コマンドを行ったら再接続がうまくいくようになりました。</p>

<p>AT&amp;F、ATZ コマンド共にL-02CのATコマンド設定値を工場出荷時の設定値に戻します。</p>

<figure class='code'><figcaption><span>/etc/wvdial.conf</span><a href='https://github.com/hideyuki/ueki/blob/master/conf/wvdial.conf'>Source</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">[</span>Dialer Defaults<span class="o">]</span>
</span><span class='line'><span class="nv">Init1</span> <span class="o">=</span> ATH
</span><span class='line'><span class="nv">Init2</span> <span class="o">=</span> AT&amp;F
</span><span class='line'><span class="nv">Init3</span> <span class="o">=</span> ATZ
</span><span class='line'><span class="nv">Init4</span> <span class="o">=</span> AT&amp;F
</span><span class='line'><span class="nv">Init5</span> <span class="o">=</span> ATZ
</span><span class='line'><span class="nv">Init6</span> <span class="o">=</span> ATQ0 V1 E1 <span class="nv">S0</span><span class="o">=</span>0 &amp;C1 &amp;D2 +FCLASS<span class="o">=</span>0
</span><span class='line'><span class="nv">Init7</span> <span class="o">=</span> AT+CGDCONT<span class="o">=</span>1,<span class="s2">&quot;IP&quot;</span>,<span class="s2">&quot;iijmio.jp&quot;</span>
</span><span class='line'>Dial <span class="nv">Attempts</span> <span class="o">=</span> 3
</span><span class='line'>Stupid <span class="nv">Mode</span> <span class="o">=</span> 1
</span><span class='line'>Modem <span class="nv">Type</span> <span class="o">=</span> Analog Modem
</span><span class='line'>Dial <span class="nv">Command</span> <span class="o">=</span> ATD
</span><span class='line'>Stupid <span class="nv">Mode</span> <span class="o">=</span> on
</span><span class='line'><span class="nv">Baud</span> <span class="o">=</span> 460800
</span><span class='line'>New <span class="nv">PPPD</span> <span class="o">=</span> yes
</span><span class='line'><span class="nv">APN</span> <span class="o">=</span> iijmio.jp
</span><span class='line'><span class="c">#APN = ynmbl.net</span>
</span><span class='line'><span class="nv">Modem</span> <span class="o">=</span> /dev/ttyUSB2
</span><span class='line'><span class="nv">ISDN</span> <span class="o">=</span> 0
</span><span class='line'><span class="nv">Phone</span> <span class="o">=</span> *99***1#
</span><span class='line'><span class="nv">Password</span> <span class="o">=</span> iij
</span><span class='line'><span class="nv">Username</span> <span class="o">=</span> mio@iij
</span><span class='line'>Carrier <span class="nv">Check</span> <span class="o">=</span> off
</span><span class='line'>Check Def <span class="nv">Route</span> <span class="o">=</span> on
</span><span class='line'>Abort on No <span class="nv">Dialtone</span> <span class="o">=</span> off
</span></code></pre></td></tr></table></div></figure>


<p>めでたし、めでたし。</p>
]]></content>
  </entry>
  
</feed>
