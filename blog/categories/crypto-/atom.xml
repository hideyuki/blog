<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: crypto, | MUGEN C-400]]></title>
  <link href="http://www.embodiedweb.net/blog/blog/categories/crypto-/atom.xml" rel="self"/>
  <link href="http://www.embodiedweb.net/blog/"/>
  <updated>2014-01-04T23:48:18+09:00</updated>
  <id>http://www.embodiedweb.net/blog/</id>
  <author>
    <name><![CDATA[Hideyuki Takei]]></name>
    <email><![CDATA[takehide22@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[暗号の解読方法とその対策]]></title>
    <link href="http://www.embodiedweb.net/blog/blog/2013/03/15/common-attack-crypto/"/>
    <updated>2013-03-15T20:55:00+09:00</updated>
    <id>http://www.embodiedweb.net/blog/blog/2013/03/15/common-attack-crypto</id>
    <content type="html"><![CDATA[<p>最近はまた<a href="http://www.j-cast.com/2013/03/15169841.html">メガネ屋さんのクレジットカード情報が流出</a>しました！！こういうセキュアな情報へアクセスするための攻撃は、サーバなどのソフトウェアだけでなく、ハードウェアでも起こりえます。</p>

<p>これらの攻撃に対抗するためには、ハードウェア／ソフトウェアでセキュアな情報をデータ認証したり、個体のクローンを作成できないように相手認証する、などの認証が必要です。その認証を実現するにあたって、なるべく強力な暗号を採用しています。</p>

<p>今回はその暗号に対する攻撃方法と、それに対する対策を見てきましょう。</p>

<p>よくある攻撃方法としては、以下のものがあります。</p>

<ul>
<li>中間者攻撃 (Man in the middle)</li>
<li>ブルートフォース攻撃 (Brute force)</li>
<li>反射攻撃 (Replay attack)</li>
<li>RAMモニタリング攻撃 (RAM monitoring)</li>
<li>マイクロコントローラのプログラム(ファーム)のリバースエンジニアリング</li>
<li>ハードウェア攻撃</li>
</ul>


<p>それぞれの詳細と対策を以下に述べていきます。</p>

<h2>中間者攻撃 (Man in the middle)</h2>

<p>この攻撃はバスモニターとロジアナを使って行われます。</p>

<p>1-wireで繋がれている認証デバイスのピンをキャプチャし、認証デバイスから返ってくるデータを取得します。そして、認証デバイスとホストシステムとのコネクションを一時的に中断させ、中断している暗号データとは違うデータを攻撃者が挿入していきます。そこで得られたデータは暗号のデコードツールとして使われます。</p>

<p>SHA-256 の1方向ハッシュ関数はこの種の攻撃を防ぐことができます。チャレンジ（入力）を求めるためのシークレットデータを知ることなしに、攻撃者はー正しいレスポンス(出力)を予測することはできません。チャレンジやレスポンスのいつくかのビットを変えると、ホストシステムはチャレンジ-レスポンスのペアを無効と判断します。</p>

<p>もし固定のチャレンジ-レスポンスのペアが使っている場合、攻撃者はあらかじめすべてのチャレンジを知らなければなりません。また、可変のチャレンジ-レスポンスのペアの場合は、予測は非常に困難になり攻撃は成功しないでしょう。</p>

<h2>ブルートフォース攻撃 (Brute force)</h2>

<p>この攻撃方法は中間者攻撃に似ており、同様にバスをキャプチャします。攻撃者はそれらのデータをコンピュータに移し解析します。たいていの場合、チャレンジとして結合されるシークレットを1からすべて試し、先に記録したレスポンスが得られたら成功です。</p>

<p>しかし SHA-256 の場合、シークレットはとてつもなく巨大なキーが設定されているので、この攻撃が成功するには膨大な時間が必要となります。ゆえに限りなく不可能です。</p>

<h2>反射攻撃 (Replay attack)</h2>

<p>反射攻撃は中間者攻撃とほぼ同じです。認証デバイス-ホストシステム間のバスをモニタリング &amp; 記録し、それらのデータをホストシステムに戻します。そうすると、ホストしてムは正しいデータとして判断されます。</p>

<p>この攻撃を阻止するには、毎回変化するチャレンジを使用します。たいていは、乱数をホストシステムで作成し、それをチャレンジとして使用しています。乱数のチャレンジから作成されるMAC (Message Authentication Code) は、毎回ユニークな値となり、レスポンスがモニタリング &amp; 記録されたとしても次回はチャレンジが変わるので無効となります。</p>

<p>この攻撃が成功するには乱数が本当の乱数でない時だけです。(C言語のRANDで生成される擬似乱数は使用してはいけません) ですので、反射攻撃においては乱数生成器に気をつけてください。もし可能なら、FIPS の擬似乱数生成器を利用しましょう。</p>

<h2>RAMモニタリング攻撃 (RAM monitoring)</h2>

<p>コンピュータやマイクロプロセッサのメモリを定期的にスナップショットをとる手法です。メモリーに存在するシークレットはスナップショットから抽出することができます。この攻撃方法はたいてい認証チップからの期待されたレスポンスを計算するためにシークレットを使う必要があるためホストシステムに搭載されます。</p>

<p>この攻撃を防ぐためには、MACを算出する時にシークレットをRAMに展開することがない認証チップを採用する必要がります。そうすることでRAMを読まれてもシークレットを発見されることはありません。</p>

<p>また、認証チップと接続されるマイクロコントローラは以下の点を注意して実装する必要があります。</p>

<ul>
<li>新規コードの追加/読み取りの禁止</li>
<li>JTAGやテスト/プログラミングのインタフェースの無効化</li>
<li>内部メモリのリソースへのアクセスを禁止</li>
<li>自己プログラミング禁止</li>
<li>コードセグメントにコードをフィットさせる</li>
<li>コードはややこしく書く。きれいに書かない

<ul>
<li>C の struct はデータが整った状態でメモリーに格納されてしまう</li>
<li>普通良いと言われているコーディングスタンダートは、この場合“逆に”良くない</li>
<li>すくなくとも数字はランダムに格納し、スタックは必要な時だけ使おう</li>
</ul>
</li>
</ul>


<p>ちゃんと最後にマイコンのヒューズの設定をしましょう！</p>

<p>そして、RAMはなるべく使わないように心がけましょう。。(きびしい)</p>

<h2>マイクロコントローラのプログラム(ファーム)のリバースエンジニアリング</h2>

<p>ホストのプログラムが抽出されたり、セキュリティーチェックをパスするために編集されたり、新規コードを挿入されれば、たくさんの偽物デバイスを生むことになります。</p>

<p>まず1つ目の防御方法として、読み出し／コピーが困難なROMに格納されるブートローダです。
ROMに入ったブートローダはユーザコードよりも変更が難しく、防御が簡単です。</p>

<p>2つ目に、コンパイラの最適化を有効にしておきましょう。最近のリバースコンパイラはなかなか良くなってきていますが、最適化のかかったコードの解析はアマチュアにとってはとても厳しいものです。</p>

<h2>ハードウェア攻撃</h2>

<p>ハードウェア攻撃は、文字通り物理的に値を読み出す攻撃手法です。</p>

<p>この攻撃から完璧に防ぐためには、外部から壊すことができないチップを採用する必要があります。(といっても、そのようなことはほぼ不可能です)</p>

<p>ハードウェア攻撃をなるべく阻止するように設計された認証チップを使いましょう。</p>

<hr />

<h1>おわりに</h1>

<p>上記では暗号の解読や機械に対しての攻撃方法を挙げていましたが、それ以外にも人や暗号システムに攻撃することも可能です。</p>

<ul>
<li>人へのアタック：こっそりオフィスに忍び込んで手書きのパスワードを手に入れる。PCの盗難など。</li>
<li>バックドアの入り方の流出：そもそもバックドアは作らないように、、</li>
</ul>


<p>BCASは誰かがバックドアの入り方を流出(?!)させてBCASの暗号が無効化されましたね。(新しいBCASではバックドア自体がなくなっているようですが、、)</p>

<p>まだまだ暗号の旅は続く、、</p>

<h2>参考文献</h2>

<ul>
<li><a href="http://en.wikipedia.org/wiki/SHA-2">http://en.wikipedia.org/wiki/SHA-2</a></li>
<li><a href="http://japan.maximintegrated.com/app-notes/index.mvp/id/3675">http://japan.maximintegrated.com/app-notes/index.mvp/id/3675</a></li>
<li><a href="http://dev.sbins.co.jp/cryptography/cryptography01.html">http://dev.sbins.co.jp/cryptography/cryptography01.html</a></li>
<li><a href="http://www.atmel.jp/ja/jp/devices/ATSHA204.aspx?tab=documents">http://www.atmel.jp/ja/jp/devices/ATSHA204.aspx?tab=documents</a></li>
<li><a href="http://www.wani.net/bak/crypt/attack.htm">http://www.wani.net/bak/crypt/attack.htm</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
